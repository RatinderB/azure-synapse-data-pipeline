{
	"name": "Clean and Transform",
	"properties": {
		"folder": {
			"name": "ProjectScripts"
		},
		"content": {
			"query": "-- Insert Valid Records into silver.Customers\nINSERT INTO [silver].[Customers] (CustomerID, Name, Email, Phone, Address)\nSELECT\n    CustomerID,\n    Name,\n    Email,\n    Phone,\n    Address\nFROM [bronze].[Customers]\nWHERE\n    Email LIKE '%@%.%' AND\n    LEN(Address) >= 10;\n\n-- Insert Invalid Records into error.Customers_Error\nINSERT INTO [error].[Customers_Error] (CustomerID, Name, Email, Phone, Address, ErrorMessage, ErrorDateTime)\nSELECT\n    CustomerID,\n    Name,\n    Email,\n    Phone,\n    Address,\n    CASE\n        WHEN Email NOT LIKE '%@%.%' THEN 'Invalid Email Format'\n        WHEN LEN(Address) < 10 THEN 'Address Too Short'\n        ELSE 'Unknown Error'\n    END AS ErrorMessage,\n    GETDATE() AS ErrorDateTime\nFROM [bronze].[Customers]\nWHERE\n    Email NOT LIKE '%@%.%' OR\n    LEN(Address) < 10;\n\n\n-- Insert Valid Records into Silver.Products\nINSERT INTO [silver].[Products] (ProductID, ProductName, Category, Price, StockQuantity)\nSELECT\n    ProductID,\n    ProductName,\n    Category,\n    Price,\n    StockQuantity\nFROM [bronze].[Products]\nWHERE\n    Price > 0 AND\n    StockQuantity >= 0;\n\n-- Insert Invalid Records into error.Products_Error\nINSERT INTO [error].[Products_Error] (ProductID, ProductName, Category, Price, StockQuantity, ErrorMessage, ErrorDateTime)\nSELECT\n    ProductID,\n    ProductName,\n    Category,\n    Price,\n    StockQuantity,\n    CASE\n        WHEN Price <= 0 THEN 'Invalid Price'\n        WHEN StockQuantity < 0 THEN 'Invalid Stock Quantity'\n    END AS ErrorMessage,\n    GETDATE() AS ErrorDateTime\nFROM [bronze].[Products]\nWHERE\n    Price <= 0 OR\n    StockQuantity < 0;\n\n-- Insert Valid Records into silver.Orders\nINSERT INTO [silver].[Orders] (OrderID, CustomerID, OrderDate, TotalAmount)\nSELECT\n    o.OrderID,\n    o.CustomerID,\n    CASE\n        WHEN o.OrderDate <= GETDATE() THEN o.OrderDate\n        ELSE GETDATE()  -- Replace future dates with current date\n    END AS OrderDate,\n    o.TotalAmount\nFROM [bronze].[Orders] o\nJOIN [silver].[Customers] c ON o.CustomerID = c.CustomerID\nWHERE\n    o.OrderDate <= GETDATE();\n\n-- Insert Invalid Records into error.Orders_Error\nINSERT INTO [error].[Orders_Error] (OrderID, CustomerID, OrderDate, TotalAmount, ErrorMessage, ErrorDateTime)\nSELECT\n    o.OrderID,\n    o.CustomerID,\n    o.OrderDate,\n    o.TotalAmount,\n    CASE\n        WHEN o.OrderDate > GETDATE() THEN 'Future Order Date'\n        WHEN c.CustomerID IS NULL THEN 'Invalid CustomerID'\n    END AS ErrorMessage,\n    GETDATE() AS ErrorDateTime\nFROM [bronze].[Orders] o\nLEFT JOIN [silver].[Customers] c ON o.CustomerID = c.CustomerID\nWHERE\n    o.OrderDate > GETDATE() OR\n    c.CustomerID IS NULL;\n\n\n-- Insert Valid Records into silver.OrderItems\nINSERT INTO [silver].[OrderItems] (OrderItemID, OrderID, ProductID, Quantity, UnitPrice)\nSELECT\n    oi.OrderItemID,\n    oi.OrderID,\n    oi.ProductID,\n    oi.Quantity,\n    p.Price AS UnitPrice\nFROM [bronze].[OrderItems] oi\nJOIN [silver].[Orders] o ON oi.OrderID = o.OrderID\nJOIN [silver].[Products] p ON oi.ProductID = p.ProductID\nWHERE\n    oi.Quantity > 0;\n\n\n-- Insert Invalid Records into error.OrderItems_Error\nINSERT INTO [error].[OrderItems_Error] (OrderItemID, OrderID, ProductID, Quantity, UnitPrice, ErrorMessage, ErrorDateTime)\nSELECT\n    oi.OrderItemID,\n    oi.OrderID,\n    oi.ProductID,\n    oi.Quantity,\n    oi.UnitPrice,\n    CASE\n        WHEN oi.Quantity <= 0 THEN 'Invalid Quantity'\n        WHEN o.OrderID IS NULL THEN 'Invalid OrderID'\n        WHEN p.ProductID IS NULL THEN 'Invalid ProductID'\n    END AS ErrorMessage,\n    GETDATE() AS ErrorDateTime\nFROM [bronze].[OrderItems] oi\nLEFT JOIN [silver].[Orders] o ON oi.OrderID = o.OrderID\nLEFT JOIN [silver].[Products] p ON oi.ProductID = p.ProductID\nWHERE\n    oi.Quantity <= 0 OR\n    o.OrderID IS NULL OR\n    p.ProductID IS NULL;",
			"metadata": {
				"language": "sql"
			},
			"currentConnection": {
				"databaseName": "DEPipelineDB",
				"poolName": "DEPipelineDB"
			},
			"resultLimit": 5000
		},
		"type": "SqlQuery"
	}
}